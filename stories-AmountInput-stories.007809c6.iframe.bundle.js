"use strict";(self.webpackChunk_mundia_dirt_react=self.webpackChunk_mundia_dirt_react||[]).push([[81],{"./src/stories/AmountInput.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Required:()=>Required,WithHelpText:()=>WithHelpText,__namedExportsOrder:()=>__namedExportsOrder,default:()=>AmountInput_stories});var react=__webpack_require__("./node_modules/react/index.js"),index_esm=__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs"),fieldinput=__webpack_require__("./src/components/fieldinput/index.tsx"),function_utils=__webpack_require__("./src/utils/function-utils/index.tsx");function AmountInput({name,control,rules,defaultValue="",...rest}){return react.createElement(index_esm.xI,{name,control,rules,defaultValue,render:({field,fieldState})=>{const{value,onChange,...fieldProps}=field,displayValue=function_utils.A.formatNumberWithCommas(value??"");return react.createElement(fieldinput.A,{...rest,...fieldProps,value:displayValue,inputMode:"decimal",onChange:val=>{const numericOnly=val.replace(/[^\d]/g,""),numericValue=function_utils.A.unformatNumber(numericOnly);onChange(numericValue)},error:!!fieldState.error,helpText:fieldState.error?fieldState.error.message:rest.helpText,inputClassName:(rest.inputClassName||"")+" amount-input"})}})}const amountinput=AmountInput;AmountInput.__docgenInfo={description:"",methods:[],displayName:"AmountInput",props:{name:{required:!0,tsType:{name:"Path",elements:[{name:"T"}],raw:"Path<T>"},description:""},control:{required:!0,tsType:{name:"any"},description:""},rules:{required:!1,tsType:{name:"any"},description:""},defaultValue:{required:!1,tsType:{name:"PathValue",elements:[{name:"T"},{name:"Path",elements:[{name:"T"}],raw:"Path<T>"}],raw:"PathValue<T, Path<T>>"},description:"",defaultValue:{value:"''",computed:!1}}},composes:["Omit"]};const AmountInput_stories={title:"Components/AmountInput",component:amountinput},Default=()=>{const{control,handleSubmit,watch}=(0,index_esm.mN)({defaultValues:{amount:"5000000"}});return react.createElement("form",{onSubmit:handleSubmit((data=>alert(JSON.stringify(data))))},react.createElement(amountinput,{name:"amount",control,label:"Amount",placeholder:"Enter amount",helpText:"Enter a number. Commas will be added automatically."}),react.createElement("div",{style:{marginTop:12}},react.createElement("strong",null,"Raw value:")," ",watch("amount")),react.createElement("button",{type:"submit",style:{marginTop:12}},"Submit"))},Required=()=>{const{control,handleSubmit,formState}=(0,index_esm.mN)({defaultValues:{amount:""}});return react.createElement("form",{onSubmit:handleSubmit((data=>alert(JSON.stringify(data))))},react.createElement(amountinput,{name:"amount",control,label:"Amount",placeholder:"Enter amount",rules:{required:"Amount is required"}}),formState.errors.amount&&react.createElement("div",{style:{color:"red"}},formState.errors.amount.message),react.createElement("button",{type:"submit",style:{marginTop:12}},"Submit"))},WithHelpText=()=>{const{control}=(0,index_esm.mN)({defaultValues:{amount:""}});return react.createElement(amountinput,{name:"amount",control,label:"Amount",placeholder:"Enter amount",helpText:"This is a custom help text for the amount input."})},__namedExportsOrder=["Default","Required","WithHelpText"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => {\n  const {\n    control,\n    handleSubmit,\n    watch\n  } = useForm<FormValues>({\n    defaultValues: {\n      amount: \'5000000\'\n    }\n  });\n  const onSubmit: SubmitHandler<FormValues> = data => alert(JSON.stringify(data));\n  return <form onSubmit={handleSubmit(onSubmit)}>\n      <AmountInput name="amount" control={control} label="Amount" placeholder="Enter amount" helpText="Enter a number. Commas will be added automatically." />\n      <div style={{\n      marginTop: 12\n    }}>\n        <strong>Raw value:</strong> {watch(\'amount\')}\n      </div>\n      <button type="submit" style={{\n      marginTop: 12\n    }}>Submit</button>\n    </form>;\n}',...Default.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'() => {\n  const {\n    control,\n    handleSubmit,\n    formState\n  } = useForm<FormValues>({\n    defaultValues: {\n      amount: \'\'\n    }\n  });\n  const onSubmit: SubmitHandler<FormValues> = data => alert(JSON.stringify(data));\n  return <form onSubmit={handleSubmit(onSubmit)}>\n      <AmountInput name="amount" control={control} label="Amount" placeholder="Enter amount" rules={{\n      required: \'Amount is required\'\n    }} />\n      {formState.errors.amount && <div style={{\n      color: \'red\'\n    }}>{formState.errors.amount.message}</div>}\n      <button type="submit" style={{\n      marginTop: 12\n    }}>Submit</button>\n    </form>;\n}',...Required.parameters?.docs?.source}}},WithHelpText.parameters={...WithHelpText.parameters,docs:{...WithHelpText.parameters?.docs,source:{originalSource:'() => {\n  const {\n    control\n  } = useForm<FormValues>({\n    defaultValues: {\n      amount: \'\'\n    }\n  });\n  return <AmountInput name="amount" control={control} label="Amount" placeholder="Enter amount" helpText="This is a custom help text for the amount input." />;\n}',...WithHelpText.parameters?.docs?.source}}}}}]);